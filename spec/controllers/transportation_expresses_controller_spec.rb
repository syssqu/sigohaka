# require 'rails_helper'
# -*- coding: utf-8 -*-
require 'factory_girl'
require 'spec_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TransportationExpressesController, :type => :controller do
  describe "ユーザー" do
     
    describe "ログイン" do
     
      login_user
      specify "認証" do
        
        subject.current_user.should_not be_nil
      end
    end 

    describe "項目追加" do
      login_user
     
      let(:transportation_express){FactoryGirl.create(:transportation_express,user: @user)}
     
      subject{transportation_express}

      it { should respond_to(:user_id) }
      it { should be_valid }

      describe "user_id がない場合" do
        before { transportation_express.user_id = nil }
        it { should_not be_nil }
      end
      specify "user_idが一致（関連付け）" do
        expect(transportation_express.user_id).to eq @user.id
      end
      
    end
   
  end

  describe "アクション" do
    login_user
    5.times do
      let(:transportation_express){FactoryGirl.create(:transportation_express,user: @user)}
    end
    describe "GET 'index'" do
      
      it "returns http success" do
        get :index
        response.should be_success
      end
    end

    describe "GET 'show'" do
      it "returns http success" do
        get :show, {:id => transportation_express.id}
        response.should be_success
      end
    end

    describe "GET 'new'" do
      it "returns http success" do
        get 'new'
        response.should be_success
      end
    end

    # describe "GET 'print'" do
    #   before do
    #     # visit "/transportation_expresses/print.pdf?debug=1"
    #      visit print_transportation_expresses_path

    #     # visit transportation_expresses_path
    #     # click_on "PDF出力"

    #     # get 'print'
    #     # redirect_to(print_transportation_expresses_path)
    #     visit "/transportation_expresses/print.pdf?debug=1"

    #   end
    #   it "PDFレイアウト表示" do
    #     # expect { click_link "PDF出力"}.to have_content('交通費精算書')
    #     # sign_in @user
    #     # page.should have_css('h1', text: '交通費精算書')
    #     # response.should have_selector('h1',:text=>'交通費精算書')
    #     page.should have_content("交通費精算書")
        
    #     # should have_content("交通費精算書")
    #   end
    #   # it "returns http success" do
    #   #   get 'print'
    #   #   response.should be_success

    #   # end
    # end

    describe "GET 'edit'" do
      it "returns http success" do
        get :edit, {:id => transportation_express.user_id}
        response.should be_success
      end
    end

    # describe "GET 'create'" do
    #   it "returns http success" do
    #     post :create, transportation_express
    #     response.should be_success
    #   end
    # end

    # describe "GET 'update'" do
    #   it "returns http success" do
    #     patch :update, {:id => transportation_express}
    #     response.should be_success
    #   end
    # end

    describe "'destroy'確認" do
      transportation_express1=FactoryGirl.create(:transportation_express,user: @user)
      before do
        visit transportation_expresses_path
      end
      
      it "destroy完了" do
        expect { delete :destroy,{id: transportation_express1} }.to change(TransportationExpress, :count).by(-1)
      end
    end
  end
end